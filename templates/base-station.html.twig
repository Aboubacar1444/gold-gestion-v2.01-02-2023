<!DOCTYPE html>
<html data-bs-theme="dark">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>{% block title %}Gestion de station{% endblock %}</title>
        <link rel="icon" href="{{asset('assets/files/gold.png')}}" name="Easygold">
        {% block print %}

        {% endblock %}

        {% block stylesheets %}
            {#  PLUGINS #}
            <link href="{{ asset('station/assets/plugins/perfect-scrollbar/css/perfect-scrollbar.css') }}" rel="stylesheet">
            <link rel="stylesheet" type="text/css" href="{{ asset('station/assets/plugins/metismenu/metisMenu.min.css') }}">
            <link rel="stylesheet" type="text/css" href="{{ asset('station/assets/plugins/metismenu/mm-vertical.css') }}">
            {#  BOOTSTRAP #}
            <link href="{{asset('station/assets/css/bootstrap.min.css')}}" rel="stylesheet">
            <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.11.2/css/all.css">
            <link href="https://fonts.googleapis.com/css2?family=Noto+Sans:wght@300;400;500;600&amp;display=swap" rel="stylesheet">
            <link href="https://fonts.googleapis.com/css?family=Material+Icons+Outlined" rel="stylesheet">
            {#  MAIN CSS #}
            <link href="{{asset('station/assets/css/bootstrap-extended.css')}}" rel="stylesheet">
            <link href="{{asset('station/sass/main.css')}}" rel="stylesheet">
            <link href="{{asset('station/sass/dark-theme.css')}}" rel="stylesheet">
            <link href="{{asset('station/sass/semi-dark.css')}}" rel="stylesheet">
            <link href="{{asset('station/sass/bordered-theme.css')}}" rel="stylesheet">
            <link href="{{asset('station/assets/css/extra-icons.css')}}" rel="stylesheet">
{#            <link rel="stylesheet" href="{{ asset('assets/css/owl.carousel.min.css') }}">#}
{#            <link rel="stylesheet" href="{{ asset('assets/css/owl.theme.default.min.css') }}">#}
{#            <link rel="stylesheet" href="{{ asset('assets/css/owl.theme.green.min.css') }}">#}
{#            <link rel="stylesheet" href="{{ asset('assets/css/addons/datatables.min.css') }}">#}
{#            <link rel="stylesheet" href="{{ asset('assets/css/addons/datatables-select.min.css') }}">#}
{#            <style>#}
{#                body{#}
{#                    position:relative;#}
{#                    min-height:100vh;#}
{#                    padding-bottom:100px;#}
{#                    margin:0;#}
{#                }#}
{#                footer{#}
{#                    position:absolute;#}
{#                    bottom:0;#}
{#                    width:100%;#}
{#                }#}
{#                #}
{#            </style>#}
        {% endblock %}

        {% block javascripts %}

        {% endblock %}
    </head>
    <body class= {% if app.request.get('_route') == "app_login" %} "rgba-grey-strong" {% endif %} >
        {% block header %}
                {% include "base/header-station.html.twig" %}
        {% endblock %}
        <main class="main-wrapper">
            <div class="main-content">
                {% block body %}{% endblock %}
            </div>
        </main>
        <div class="offcanvas offcanvas-start w-260" data-bs-scroll="true" tabindex="-1" id="offcanvasUserDetails">
            <div class="offcanvas-body">
                <div class="user-wrapper">
                    <div class="text-center p-3 bg-light rounded">
{#                        <img src="https://placehold.co/110x110" class="rounded-circle p-1 shadow mb-3" width="120" height="120" alt="">#}
                        <h5 class="user-name mb-0 fw-bold">{{ app.user.fullname }}</h5>
                        <p class="mb-0">{{ app.user.type }}</p>
                    </div>
                    <div class="list-group list-group-flush mt-3 profil-menu fw-bold">
                        <a href="{{path('app_station_employee_edit_password',{id: app.user.id})}}" class="list-group-item list-group-item-action d-flex align-items-center gap-2 border-top"><i class="material-icons-outlined">person_outline</i>Changer mon mot de passe</a>
                        <a href="{{ path('app_logout') }}" class="list-group-item list-group-item-action d-flex align-items-center gap-2 border-bottom"><i class="material-icons-outlined">power_settings_new</i>DÃ©connexion</a>
{#                        <a href="javascript:;" class="list-group-item list-group-item-action d-flex align-items-center gap-2"><i class="material-icons-outlined">local_bar</i>Setting</a>#}
{#                        <a href="javascript:;" class="list-group-item list-group-item-action d-flex align-items-center gap-2"><i class="material-icons-outlined">dashboard</i>Dashboard</a>#}
{#                        <a href="javascript:;" class="list-group-item list-group-item-action d-flex align-items-center gap-2"><i class="material-icons-outlined">account_balance</i>Earning</a>#}
{#                        <a href="javascript:;" class="list-group-item list-group-item-action d-flex align-items-center gap-2"><i class="material-icons-outlined">cloud_download</i>Downloads</a>#}
                    </div>
                </div>

            </div>
            <div class="offcanvas-footer p-3 border-top">
                <div class="text-center">
                    <button type="button" class="btn d-flex align-items-center gap-2" data-bs-dismiss="offcanvas"><i class="material-icons-outlined">close</i><span>Close Sidebar</span></button>
                </div>
            </div>
        </div>

        {% block footer %}
            {% include "base/footer.html.twig" %}
        {% endblock %}

        <script src="{{asset('station/assets/js/bootstrap.bundle.min.js')}}"></script>
        <script src="{{asset('station/assets/js/jquery.min.js')}}"></script>
        <script src="{{asset('station/assets/plugins/perfect-scrollbar/js/perfect-scrollbar.js')}}"></script>
        <script src="{{asset('station/assets/plugins/metismenu/metisMenu.min.js')}}"></script>
        <script src="{{asset('station/assets/plugins/datatable/js/jquery.dataTables.min.js')}}"></script>
        <script src="{{asset('station/assets/plugins/datatable/js/dataTables.bootstrap5.min.js')}}"></script>

        <script src="{{asset('station/assets/plugins/apexchart/apexcharts.min.js')}}"></script>

        <script src="{{asset('station/assets/js/index.js')}}"></script>
        <script src="{{asset('station/assets/plugins/peity/jquery.peity.min.js')}}"></script>

        <script src="{{asset('station/assets/plugins/validation/jquery.validate.min.js')}}"></script>
        <script src="{{asset('station/assets/plugins/validation/validation-script.js')}}"></script>

        <script>
            $(".data-attributes span").peity("donut")
        </script>
        <script>
            // Example starter JavaScript for disabling form submissions if there are invalid fields
            (function () {
                'use strict'

                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.querySelectorAll('.needs-validation')

                // Loop over them and prevent submission
                Array.prototype.slice.call(forms)
                    .forEach(function (form) {
                        form.addEventListener('submit', function (event) {
                            if (!form.checkValidity()) {
                                event.preventDefault()
                                event.stopPropagation()
                            }

                            form.classList.add('was-validated')
                        }, false)
                    })

                var table = $('#exemple2').DataTable( {
                    lengthChange: false,
                    buttons: [ 'copy', 'excel', 'pdf', 'print']
                } );
                table.buttons().container()
                    .appendTo( '#example2_wrapper .col-md-6:eq(0)' );


            })()
            function number_format (number, decimals, dec_point, thousands_sep) {
                // Strip all characters but numerical ones.
                number = (number + '').replace(/[^0-9+\-Ee.]/g, '');
                var n = !isFinite(+number) ? 0 : +number,
                    prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
                    sep = (typeof thousands_sep === 'undefined') ? '.' : thousands_sep,
                    dec = (typeof dec_point === 'undefined') ? ',' : dec_point,
                    s = '',
                    toFixedFix = function (n, prec) {
                        var k = Math.pow(10, prec);
                        return '' + Math.round(n * k) / k;
                    };
                // Fix for IE parseFloat(0.55).toFixed(0) = 0;
                s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
                if (s[0].length > 3) {
                    s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
                }
                if ((s[1] || '').length < prec) {
                    s[1] = s[1] || '';
                    s[1] += new Array(prec - s[1].length + 1).join('0');
                }
                return s.join(dec);
            }
        </script>

        <script src="{{asset('station/assets/js/main.js')}}"></script>

{#        <script src="{{asset('./assets/js/jquery-3.4.1.min.js')}}"></script>#}
{#        <script src="{{asset('./assets/js/popper.min.js')}}"></script>#}
{#        <script src="{{asset('./assets/js/bootstrap.min.js')}}"></script>#}
{#        <script src="{{asset('./assets/js/mdb.min.js')}}"></script>#}
{#        <script src="{{asset('./assets/js/owl.carousel.min.js')}}"></script>#}
{#        <script src="{{ asset('assets/js/modules/chart.js') }}"></script>#}
{#        <script src="{{ asset('assets/js/addons/datatables.min.js') }}"></script>#}
{#        <script src="{{ asset('assets/js/addons/datatables-select.min.js') }}"></script>#}
        <script>
            
            function Unite( nombre ){
                var unite;
                switch( nombre ){
                    case 0: unite = "zÃ©ro";		break;
                    case 1: unite = "un";		break;
                    case 2: unite = "deux";		break;
                    case 3: unite = "trois"; 	break;
                    case 4: unite = "quatre"; 	break;
                    case 5: unite = "cinq"; 	break;
                    case 6: unite = "six"; 		break;
                    case 7: unite = "sept"; 	break;
                    case 8: unite = "huit"; 	break;
                    case 9: unite = "neuf"; 	break;
                }
                //fin switch
                return unite;
            }
            //-----------------------------------------------------------------------

            function Dizaine( nombre ){
                switch( nombre ){
                    case 10: dizaine = "dix"; break;
                    case 11: dizaine = "onze"; break;
                    case 12: dizaine = "douze"; break;
                    case 13: dizaine = "treize"; break;
                    case 14: dizaine = "quatorze"; break;
                    case 15: dizaine = "quinze"; break;
                    case 16: dizaine = "seize"; break;
                    case 17: dizaine = "dix-sept"; break;
                    case 18: dizaine = "dix-huit"; break;
                    case 19: dizaine = "dix-neuf"; break;
                    case 20: dizaine = "vingt"; break;
                    case 30: dizaine = "trente"; break;
                    case 40: dizaine = "quarante"; break;
                    case 50: dizaine = "cinquante"; break;
                    case 60: dizaine = "soixante"; break;
                    case 70: dizaine = "soixante-dix"; break;
                    case 80: dizaine = "quatre-vingt"; break;
                    case 90: dizaine = "quatre-vingt-dix"; break;
                }//fin switch
                return dizaine;
            }
            //-----------------------------------------------------------------------

            function NumberToLetter( nombre ){
                var i, j, n, quotient, reste, nb ;
                var ch
                var numberToLetter='';
                //__________________________________
                
                if(  nombre.toString().replace( / /gi, "" ).length > 15  )	return "dÃ©passement de capacitÃ©";
                if(  isNaN(nombre.toString().replace( / /gi, "" ))  )		return "Nombre non valide";

                nb = parseFloat(nombre.toString().replace( / /gi, "" ));
                if(  Math.ceil(nb) != nb  )	return  "Nombre avec virgule non gÃ©rÃ©.";
                
                n = nb.toString().length;
                switch( n ){
                    case 1: numberToLetter = Unite(nb); break;
                    case 2: if(  nb > 19  ){
                                quotient = Math.floor(nb / 10);
                                reste = nb % 10;
                                if(  nb < 71 || (nb > 79 && nb < 91)  ){
                                        if(  reste == 0  ) numberToLetter = Dizaine(quotient * 10);
                                        if(  reste == 1  ) numberToLetter = Dizaine(quotient * 10) + "-et-" + Unite(reste);
                                        if(  reste > 1   ) numberToLetter = Dizaine(quotient * 10) + "-" + Unite(reste);
                                }else numberToLetter = Dizaine((quotient - 1) * 10) + "-" + Dizaine(10 + reste);
                            }else numberToLetter = Dizaine(nb);
                            break;
                    case 3: quotient = Math.floor(nb / 100);
                            reste = nb % 100;
                            if(  quotient == 1 && reste == 0   ) numberToLetter = "cent";
                            if(  quotient == 1 && reste != 0   ) numberToLetter = "cent" + " " + NumberToLetter(reste);
                            if(  quotient > 1 && reste == 0    ) numberToLetter = Unite(quotient) + " cents";
                            if(  quotient > 1 && reste != 0    ) numberToLetter = Unite(quotient) + " cent " + NumberToLetter(reste);
                            break;
                    case 4 :  quotient = Math.floor(nb / 1000);
                                reste = nb - quotient * 1000;
                                if(  quotient == 1 && reste == 0   ) numberToLetter = "mille";
                                if(  quotient == 1 && reste != 0   ) numberToLetter = "mille" + " " + NumberToLetter(reste);
                                if(  quotient > 1 && reste == 0    ) numberToLetter = NumberToLetter(quotient) + " mille";
                                if(  quotient > 1 && reste != 0    ) numberToLetter = NumberToLetter(quotient) + " mille " + NumberToLetter(reste);
                                break;
                    case 5 :  quotient = Math.floor(nb / 1000);
                                reste = nb - quotient * 1000;
                                if(  quotient == 1 && reste == 0   ) numberToLetter = "mille";
                                if(  quotient == 1 && reste != 0   ) numberToLetter = "mille" + " " + NumberToLetter(reste);
                                if(  quotient > 1 && reste == 0    ) numberToLetter = NumberToLetter(quotient) + " mille";
                                if(  quotient > 1 && reste != 0    ) numberToLetter = NumberToLetter(quotient) + " mille " + NumberToLetter(reste);
                                break;
                    case 6 :  quotient = Math.floor(nb / 1000);
                                reste = nb - quotient * 1000;
                                if(  quotient == 1 && reste == 0   ) numberToLetter = "mille";
                                if(  quotient == 1 && reste != 0   ) numberToLetter = "mille" + " " + NumberToLetter(reste);
                                if(  quotient > 1 && reste == 0    ) numberToLetter = NumberToLetter(quotient) + " mille";
                                if(  quotient > 1 && reste != 0    ) numberToLetter = NumberToLetter(quotient) + " mille " + NumberToLetter(reste);
                                break;
                    case 7: quotient = Math.floor(nb / 1000000);
                                reste = nb % 1000000;
                                if(  quotient == 1 && reste == 0  ) numberToLetter = "un million";
                                if(  quotient == 1 && reste != 0  ) numberToLetter = "un million" + " " + NumberToLetter(reste);
                                if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " millions";
                                if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " millions " + NumberToLetter(reste);
                                break;  
                    case 8: quotient = Math.floor(nb / 1000000);
                                reste = nb % 1000000;
                                if(  quotient == 1 && reste == 0  ) numberToLetter = "un million";
                                if(  quotient == 1 && reste != 0  ) numberToLetter = "un million" + " " + NumberToLetter(reste);
                                if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " millions";
                                if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " millions " + NumberToLetter(reste);
                                break;  
                    case 9: quotient = Math.floor(nb / 1000000);
                                reste = nb % 1000000;
                                if(  quotient == 1 && reste == 0  ) numberToLetter = "un million";
                                if(  quotient == 1 && reste != 0  ) numberToLetter = "un million" + " " + NumberToLetter(reste);
                                if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " millions";
                                if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " millions " + NumberToLetter(reste);
                                break;  
                    case 10: quotient = Math.floor(nb / 1000000000);
                                    reste = nb - quotient * 1000000000;
                                    if(  quotient == 1 && reste == 0  ) numberToLetter = "un milliard";
                                    if(  quotient == 1 && reste != 0  ) numberToLetter = "un milliard" + " " + NumberToLetter(reste);
                                    if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " milliards";
                                    if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " milliards " + NumberToLetter(reste);
                                    break;	
                    case 11: quotient = Math.floor(nb / 1000000000);
                                    reste = nb - quotient * 1000000000;
                                    if(  quotient == 1 && reste == 0  ) numberToLetter = "un milliard";
                                    if(  quotient == 1 && reste != 0  ) numberToLetter = "un milliard" + " " + NumberToLetter(reste);
                                    if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " milliards";
                                    if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " milliards " + NumberToLetter(reste);
                                    break;	
                    case 12: quotient = Math.floor(nb / 1000000000);
                                    reste = nb - quotient * 1000000000;
                                    if(  quotient == 1 && reste == 0  ) numberToLetter = "un milliard";
                                    if(  quotient == 1 && reste != 0  ) numberToLetter = "un milliard" + " " + NumberToLetter(reste);
                                    if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " milliards";
                                    if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " milliards " + NumberToLetter(reste);
                                    break;	
                    case 13: quotient = Math.floor(nb / 1000000000000);
                                    reste = nb - quotient * 1000000000000;
                                    if(  quotient == 1 && reste == 0  ) numberToLetter = "un billion";
                                    if(  quotient == 1 && reste != 0  ) numberToLetter = "un billion" + " " + NumberToLetter(reste);
                                    if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " billions";
                                    if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " billions " + NumberToLetter(reste);
                                    break; 	
                    case 14: quotient = Math.floor(nb / 1000000000000);
                                    reste = nb - quotient * 1000000000000;
                                    if(  quotient == 1 && reste == 0  ) numberToLetter = "un billion";
                                    if(  quotient == 1 && reste != 0  ) numberToLetter = "un billion" + " " + NumberToLetter(reste);
                                    if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " billions";
                                    if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " billions " + NumberToLetter(reste);
                                    break; 	
                    case 15: quotient = Math.floor(nb / 1000000000000);
                                    reste = nb - quotient * 1000000000000;
                                    if(  quotient == 1 && reste == 0  ) numberToLetter = "un billion";
                                    if(  quotient == 1 && reste != 0  ) numberToLetter = "un billion" + " " + NumberToLetter(reste);
                                    if(  quotient > 1 && reste == 0   ) numberToLetter = NumberToLetter(quotient) + " billions";
                                    if(  quotient > 1 && reste != 0   ) numberToLetter = NumberToLetter(quotient) + " billions " + NumberToLetter(reste);
                                    break; 	
                }//fin switch
                /*respect de l'accord de quatre-vingt*/
                if(  numberToLetter.substr(numberToLetter.length-"quatre-vingt".length,"quatre-vingt".length) == "quatre-vingt"  ) numberToLetter = numberToLetter + "s";
                
                return numberToLetter;
            }
            //-----------------------------------------------------------------------
            {# window.onbeforeunload = function () {
                return "Do you really want to close?";
            }; #}



        </script>
        {% block ScriptP %}{% endblock %}
    </body>
</html>
